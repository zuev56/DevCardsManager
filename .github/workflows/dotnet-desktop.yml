# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]  # Запускать создание релиза при push тега вида v1.0.0
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    - name: Publish Linux x64
      run: |
        dotnet publish -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -o ./bin/DevCardsManager_Linux
        Compress-Archive -Path ./bin/DevCardsManager_Linux/* -DestinationPath ./bin/DevCardsManager_Linux.zip

    - name: Publish Windows x64

      run: |
        dotnet publish -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o ./bin/DevCardsManager_Windows
        Compress-Archive -Path ./bin/DevCardsManager_Windows/* -DestinationPath ./bin/DevCardsManager_Windows.zip

    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: DevCardsManager_Linux
        path: ./bin/DevCardsManager_Linux.zip

    - name: Upload Windows Artifact

      uses: actions/upload-artifact@v4
      with:
        name: DevCardsManager_Windows
        path: ./bin/DevCardsManager_Windows.zip

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # Запускать только при push тега
    
    steps:
    - name: Download Linux Artifact
      uses: actions/download-artifact@v4
      with:
        name: DevCardsManager_Linux

    - name: Download Windows Artifact
      uses: actions/download-artifact@v4
      with:
        name: DevCardsManager_Windows

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./DevCardsManager_Linux.zip
        asset_name: DevCardsManager_Linux.zip
        asset_content_type: application/zip

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./DevCardsManager_Windows.zip
        asset_name: DevCardsManager_Windows.zip
        asset_content_type: application/zip
